const fs = require('fs');
const path = require('path');

const { build, defineConfig } = require('tsup');

function copyFileSync(src, dest) {
  const readStream = fs.createReadStream(src);
  const writeStream = fs.createWriteStream(dest);

  return new Promise((resolve, reject) => {
    readStream.on('error', reject);
    writeStream.on('error', reject);
    writeStream.on('close', resolve);
    readStream.pipe(writeStream);
  });
}

const libraryBuildConfig = {
  bundle: true,
  metafile: false,
  splitting: false,
  treeshake: true,
  clean: true,
  dts: true,
  minify: true,
  sourcemap: true,
  entry: ['./src/index.ts', './src/worker/index.ts'],
  outDir: './dist',
  format: ['esm', 'cjs'],
  platform: 'neutral',
  target: ['es2020', 'node18'],
  tsconfig: 'tsconfig.build.json',
  loader: {
    // Worker modules are loaded as text to be inlined in the worker script
    '.worker.js': 'text',
  },
  onSuccess: async () => {
    await copyFileSync(
      path.resolve(__dirname, 'src/core/dotlottie-player.wasm'),
      path.resolve(__dirname, 'dist/dotlottie-player.wasm'),
    );
  },
};

const workerBuildConfig = (config) => ({
  bundle: true,
  metafile: false,
  banner: {
    js: `
/**
 * This is a worker script for dotlottie.
 * Do not modify this file directly.
 * As it's generated by the build process.
 */
    `,
  },
  splitting: false,
  treeshake: true,
  clean: false,
  dts: false,
  minify: true,
  sourcemap: false,
  entry: ['./src/worker/dotlottie.worker.ts'],
  format: ['esm'],
  platform: 'neutral',
  target: ['es2020', 'node18'],
  tsconfig: 'tsconfig.build.json',
  outDir: './src/worker/',
  // Build the library after the worker build, as the worker build depends on the library build
  onSuccess: () => build({ ...libraryBuildConfig, watch: config.watch }),
});

module.exports = defineConfig(workerBuildConfig);
