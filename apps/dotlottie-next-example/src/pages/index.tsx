import type { DotLottie, DotLottieWorker } from '@lottiefiles/dotlottie-react';
import { DotLottieReact, setWasmUrl } from '@lottiefiles/dotlottie-react';
import { Inter } from 'next/font/google';
import Head from 'next/head';
import { useState } from 'react';

import styles from '@/styles/Home.module.css';

const inter = Inter({ subsets: ['latin'] });

// eslint-disable-next-line no-secrets/no-secrets
const src = 'https://framerusercontent.com/assets/vGGAqPvSz8MEC2Mt4gLeswbEUQ.lottie';

setWasmUrl('/dotlottie-player.wasm');

export default function Home(): JSX.Element {
  const [dotLottie, setDotLottie] = useState<DotLottie | DotLottieWorker | null>(null);
  const [dotLottieSecond, setDotLottieSecond] = useState<DotLottie | DotLottieWorker | null>(null);
  const [showDotLottie, setShowDotLottie] = useState(false);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        {showDotLottie && (
          <>
            <DotLottieReact
              dotLottieRefCallback={setDotLottie}
              style={{
                minWidth: '100px',
              }}
              stateMachineId="toggleButton"
              src={src}
              renderConfig={{
                autoResize: true,
              }}
            />
            <DotLottieReact
              dotLottieRefCallback={setDotLottieSecond}
              style={{
                minWidth: '100px',
              }}
              stateMachineId="toggleButton"
              src={src}
              renderConfig={{
                autoResize: true,
              }}
            />
          </>
        )}
        <div>
          <button
            onClick={(): void => {
              setShowDotLottie(!showDotLottie);
            }}
          >
            {showDotLottie ? 'Hide' : 'Show'}
          </button>
          <button
            onClick={(): void => {
              if (dotLottie) {
                dotLottie.play();
              }
            }}
          >
            Play
          </button>
          <button
            onClick={(): void => {
              if (dotLottie && dotLottieSecond) {
                dotLottie.stateMachineStop();

                // dotLottie.stateMachineLoad('toggleButton');

                const data = {
                  initial: 'slap',
                  interactions: [],
                  inputs: [],
                  states: [
                    {
                      name: 'slap',
                      animation: '',
                      type: 'PlaybackState',
                      transitions: [],
                      entryActions: [],
                      exitActions: [],
                      segment: 'slap',
                      autoplay: true,
                      speed: 1,
                      final: false,
                      loop: true,
                    },
                  ],
                };

                dotLottie.stateMachineLoadData(JSON.stringify(data));

                dotLottie.stateMachineStart();

                dotLottieSecond.stateMachineStop();

                dotLottieSecond.stateMachineLoadData(JSON.stringify(data));

                dotLottieSecond.stateMachineStart();
              }
            }}
          >
            Play
          </button>
          <button
            onClick={(): void => {
              if (dotLottie) {
                dotLottie.pause();
              }
            }}
          >
            Pause
          </button>
          <button
            onClick={(): void => {
              if (dotLottie) {
                dotLottie.stop();
              }
            }}
          >
            Stop
          </button>
        </div>
      </main>
    </>
  );
}
